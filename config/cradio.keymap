// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_POINTING_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        colon {
            bindings = <&kp COLON>;
            key-positions = <27 28>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <26 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "DEFAULT";
            bindings = <
&kp Q           &kp D       &kp R        &kp W             &kp B            &kp J      &kp F              &kp U        &kp P       &kp LC(B)
&ht LEFT_WIN A  &ht LALT S  &ht LCTRL H  &ht LEFT_SHIFT T  &kp G            &kp Y      &ht RIGHT_SHIFT N  &ht RCTRL E  &ht RALT O  &ht RIGHT_WIN I
&kp Z           &kp X       &kp M        &kp C             &kp V            &kp K      &kp L              &kp COMMA    &kp DOT     &kp SLASH
                                         &lt 1 TAB         &kp BACKSPACE    &kp SPACE  &lt 2 ENTER
            >;
        };

        Symbols {
            display-name = "WIN";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3    &kp NUMBER_4       &kp N5         &kp NUMBER_6  &kp N7            &kp N8     &kp N9        &kp N0
&kp EQUAL     &kp AMPERSAND  &kp UNDERSCORE  &kp DOUBLE_QUOTES  &kp DOLLAR     &kp CARET     &kp SINGLE_QUOTE  &kp MINUS  &kp PLUS      &kp EXCLAMATION
&kp PIPE      &kp AT         &none           &kp HASH           &kp PERCENT    &kp TILDE     &kp GRAVE         &none      &kp ASTERISK  &kp BACKSLASH
                                             &trans             &trans         &trans        &mo 3
            >;
        };

        right_layer {
            display-name = "NUM & NAVIGATION";
            bindings = <
&msc SCRL_DOWN    &msc SCRL_UP       &mkp LCLK             &mkp RCLK              &none     &none   &mmv MOVE_LEFT  &mmv MOVE_UP  &mmv MOVE_DOWN  &mmv MOVE_RIGHT
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none     &none   &kp LEFT        &kp UP        &kp DOWN        &kp RIGHT
&none             &none              &kp LEFT_BRACE        &kp RIGHT_BRACE        &none     &none   &none           &none         &none           &none
                                                           &mo 3                  &trans    &trans  &trans
            >;
        };

        left_layer {
            display-name = "SYMBOL";
            bindings = <
&kp LA(LS(NUMBER_1))  &kp LA(LS(NUMBER_2))  &none             &none      &bootloader    &none   &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN
&kp LA(H)             &kp LA(NUMBER_1)      &kp LA(NUMBER_2)  &kp LA(L)  &none          &none   &kp LC(H)             &kp LC(J)             &kp LC(K)        &kp LC(L)
&none                 &none                 &none             &none      &none          &none   &none                 &none                 &none            &none
                                                              &trans     &trans         &trans  &trans
            >;
        };
    };
};
